generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  email        String    @unique @db.VarChar(255)
  bio          String?
  profilePhoto String?
  blog         Blog[]
  Comment      Comment[]
  likes        Like[]
  follower     Follows[] @relation("follower")
  following    Follows[] @relation("following")
  created_at   DateTime  @default(now())
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Blog {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  slug       String    @unique @db.VarChar(255)
  title      String    @db.VarChar(255)
  body       String
  image      String
  comment    Comment[]
  tags       Tags[]
  likes      Like[]
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
}

model Tags {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  created_at DateTime @default(now())
  blog       Blog[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  body       String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId     Int
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  blog       Blog     @relation(references: [id], fields: [blogId], onDelete: Cascade)
  blogId     Int
  user       User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId     Int
}
